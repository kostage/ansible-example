- hosts: dashboard_node
  name: Create user with password and ssh key
  remote_user: root
  tasks:
    - import_role:
        name: user
      vars:
        user_name: '{{ dashboard_node.username }}'
        user_password: "{{ dashboard_node.password | password_hash('sha512') }}"
        user_ssh_key_save_path: '{{ dashboard_node.sshkey_save_path }}'
        user_ssh_key_file: '.ssh/{{ dashboard_node.username }}_id_rsa'
  ignore_errors: yes
  ignore_unreachable: yes

- name: Evaluating the authentication agent & adding the key...
  hosts: localhost
  connection: local
  tasks:
    - import_role:
        name: sshadd
      vars:
        sshadd_key_path:  '{{ dashboard_node.sshkey_save_path }}/{{ dashboard_node.username }}_id_rsa'

- name: 'Allow HTTP for letsencrypt challenge'
  hosts: dashboard_node
  remote_user: '{{ dashboard_node.username }}'
  become: yes
  vars:
    - ansible_become_password: '{{ dashboard_node.password }}'
  tasks:
    - import_role:
        name: firewall
      vars:
        firewall_rules:
        - rule: allow
          port: 80

- name: 'Create letsencrypt cert'
  hosts: dashboard_node
  remote_user: '{{ dashboard_node.username }}'
  become: yes
  vars:
    - ansible_become_password: '{{ dashboard_node.password }}'
  tasks:
    - import_role:
        name: letsencrypt
      vars:
        letsencrypt_domain_name: '{{ dashboard_node.domain_name }}'
        letsencrypt_username: '{{ dashboard_node.username }}'
        letsencrypt_email: '{{ dashboard_node.email }}'
        letsencrypt_dir: '{{ dashboard_node.cert_dir }}'

- name: 'Tune SSH, install packages, golang, set FW'
  hosts: dashboard_node
  remote_user: '{{ dashboard_node.username }}'
  become: yes
  vars:
    - ansible_become_password: '{{ dashboard_node.password }}'
  tasks:
    - import_role:
        name: ssh
      vars:
        username: '{{ dashboard_node.username }}'
    - import_role:
        name: firewall
      vars:
        firewall_rules:
        - rule: allow
          port: 3000

- hosts: dashboard_node
  remote_user: '{{ dashboard_node.username }}'
  become: yes
  vars:
    - ansible_become_password: '{{ dashboard_node.password }}'
  tasks:
    - import_role:
        name: nodexp
      vars:
        nodexp_tls: no

- name: Install prometheus
  hosts: dashboard_node
  remote_user: '{{ dashboard_node.username }}'
  vars:
    - ansible_become_password: '{{ dashboard_node.password }}'
  tasks:
    - import_role:
        name: prometheus
      vars:
        prometheus_nodes: '{{ dashboard_node.prometheus.nodes }}'
        prometheus_filesystem_avail_alert_percent: 5
        prometheus_inodes_avail_alert_percent: 5
        prometheus_service_alert: "node_exporter.service"
        prometheus_mem_avail_alert_percent: 5

- name: Install grafana
  hosts: dashboard_node
  remote_user: '{{ dashboard_node.username }}'
  become: yes
  vars:
    - ansible_become_password: '{{ dashboard_node.password }}'
  tasks:
    - import_role:
        name: grafana
      vars:
        grafana_datasources:
          - name: Prometheus
            type: prometheus
            url: 'http://localhost:9090'
            basicAuth: false
        grafana_security_config:
          tls_path: '{{ dashboard_node.cert_dir }}'
          cert_file: '{{ dashboard_node.domain_name }}-fullchain.crt'
          key_file: '{{ dashboard_node.domain_name }}.key'
          username: '{{ dashboard_node.username }}'
          password: '{{ dashboard_node.password }}'

- name: Install alertmanager
  hosts: dashboard_node
  remote_user: '{{ dashboard_node.username }}'
  become: yes
  vars:
    - ansible_become_password: '{{ dashboard_node.password }}'
  tasks:
    - import_role:
        name: cloudalchemy.alertmanager
      vars:
        alertmanager_version: latest
        alertmanager_receivers:
        - name: 'telegram'
          telegram_configs:
          - api_url: 'https://api.telegram.org'
            bot_token: '{{ telegram_bot_token }}'
            chat_id: "{{ chat_id }}" # take from inventory due to weird integer var behavior
            disable_notifications: false
            http_config:
              follow_redirects: true
            send_resolved: true
            parse_mode: HTML
        alertmanager_route:
          group_by: ['alertname', 'cluster', 'service']
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 3h
          receiver: 'telegram'
